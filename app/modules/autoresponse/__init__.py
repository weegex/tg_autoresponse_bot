from aiogram import Router, types, Bot, F
from aiogram.fsm.context import FSMContext
from setup import keys, bot
from utils.filters import CheckNoQuestionStates, CheckQuestionStates
from modules.autoresponse import keyboards
from modules.autoresponse import states
from utils import middlewares


router = Router()


# Main handler
@router.business_message(CheckNoQuestionStates())
async def message_handler(message: types.Message, bot: Bot, state: FSMContext) -> None:
    await bot.send_message(
        business_connection_id=message.business_connection_id,
        chat_id=message.from_user.id,
        text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ üëãüòä. –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã üòé! –° –∫–∞–∫–æ–π —Ü–µ–ª—å—é –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å ü§î?\n\n(–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–Ω–∏–∑—É)",
        reply_markup=keyboards.question()
    )

    await state.set_state(states.QuestionStates.question)
    await state.update_data(main_message=message)


# Bot need handler
async def has_need(business_connection_id: int, chat_id: int) -> None:
    await bot.send_message(
        business_connection_id=business_connection_id,
        chat_id=chat_id,
        text="–Ø –µ—â—ë —Ç—Ä–µ–±—É—é—Å—å?",
        reply_markup=keyboards.has_need()
    )


@router.callback_query(states.QuestionStates.question, F.data == "yes")
async def yes_need_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    main_message = data.get("main_message")

    await message_handler(main_message, bot, state)
    await callback.answer()


@router.callback_query(states.QuestionStates.question, F.data == "no")
async def no_need_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    await bot.send_message(
        business_connection_id=callback.message.business_connection_id,
        chat_id=callback.message.chat.id,
        text="–û—Ç–ª–∏—á–Ω–æ, —Ä–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! –ù–∞–ø–∏—à–∏—Ç–µ, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å"
    )

    await callback.answer()
    await state.clear()


# Answer options for main handler

@router.callback_query(CheckQuestionStates(), F.data == "reviews")
async def reviews_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    await bot.send_message(
        business_connection_id=callback.message.business_connection_id,
        chat_id=callback.message.chat.id,
        text="–ö–æ–Ω–µ—á–Ω–æ. –û—Ç–∑—ã–≤—ã –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ @weegex_reviews"
    )

    await callback.answer()
    await has_need(
        callback.message.business_connection_id,
        callback.message.chat.id
    )


@router.callback_query(CheckQuestionStates(), F.data == "about")
async def about_callback(callback: types.CallbackQuery) -> None:
    await bot.send_message(
        business_connection_id=callback.message.business_connection_id,
        chat_id=callback.message.chat.id,
        text="–ú–µ–Ω—è –∑–æ–≤—É—Ç Weegex. –Ø —è–≤–ª—è—é—Å—å Full-Stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∏ –≥–æ—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å "
        + "–ª—é–±—É—é —Ñ–∏—á—É –¥–ª—è –í–∞—Å, –Ω–æ —ç—Ç–∏–º –º–æ–∏ –Ω–∞–≤—ã–∫–∏ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç—Å—è. –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ "
        + "–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ [@weegex_info](https://t.me/weegex_info/4)",
        parse_mode="Markdown"
    )

    await callback.answer()
    await has_need(
        callback.message.business_connection_id,
        callback.message.chat.id
    )


@router.callback_query(CheckQuestionStates(), F.data == "services")
async def services_callback(callback: types.CallbackQuery) -> None:
    await bot.send_message(
        business_connection_id=callback.message.business_connection_id,
        chat_id=callback.message.chat.id,
        text="–í—Å–µ —É—Å–ª—É–≥–∏ –∏ –∏—Ö —Ü–µ–Ω—ã —è —Ä–∞—Å—Å–ø–∏—Å–∞–ª –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ [@weegex_info](https://t.me/weegex_info/6)",
        parse_mode="Markdown"
    )

    await callback.answer()
    await has_need(
        callback.message.business_connection_id,
        callback.message.chat.id
    )
